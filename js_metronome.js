{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOleZTq8NFWp/BgVjeVF0z6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/brandonfreeman/js-metronome/blob/main/js_metronome.js\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "DJ8vORNgQ9rm",
        "outputId": "97bdadd5-c095-454d-9d1b-5094dc7201e4"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "// Create an HTML structure for the metronome with modern, responsive design\n",
              "const metronomeHtml = `\n",
              "  <style>\n",
              "    /* General styles */\n",
              "    body {\n",
              "      font-family: 'Arial', sans-serif;\n",
              "      display: flex;\n",
              "      justify-content: center;\n",
              "      align-items: center;\n",
              "      height: 100vh;\n",
              "      background-color: #f0f0f0;\n",
              "      margin: 0;\n",
              "    }\n",
              "    \n",
              "    .container {\n",
              "      background: white;\n",
              "      border-radius: 8px;\n",
              "      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n",
              "      padding: 20px;\n",
              "      width: 90%;\n",
              "      max-width: 500px;\n",
              "      text-align: center;\n",
              "    }\n",
              "\n",
              "    .control-group {\n",
              "      margin-bottom: 15px;\n",
              "    }\n",
              "\n",
              "    .control-group label {\n",
              "      display: block;\n",
              "      font-size: 1.2em;\n",
              "      margin-bottom: 5px;\n",
              "    }\n",
              "\n",
              "    .control-group input[type=\"number\"],\n",
              "    .control-group input[type=\"range\"] {\n",
              "      width: 100%;\n",
              "      padding: 10px;\n",
              "      font-size: 1em;\n",
              "      box-sizing: border-box;\n",
              "      border: 1px solid #ddd;\n",
              "      border-radius: 4px;\n",
              "    }\n",
              "\n",
              "    .control-group input[type=\"range\"] {\n",
              "      -webkit-appearance: none;\n",
              "      appearance: none;\n",
              "      height: 10px;\n",
              "      background: #ddd;\n",
              "      outline: none;\n",
              "      opacity: 0.7;\n",
              "      transition: opacity 0.2s;\n",
              "    }\n",
              "\n",
              "    .control-group input[type=\"range\"]:hover {\n",
              "      opacity: 1;\n",
              "    }\n",
              "\n",
              "    .control-group input[type=\"range\"]::-webkit-slider-thumb {\n",
              "      -webkit-appearance: none;\n",
              "      appearance: none;\n",
              "      width: 25px;\n",
              "      height: 25px;\n",
              "      border-radius: 50%;\n",
              "      background: #4CAF50;\n",
              "      cursor: pointer;\n",
              "    }\n",
              "\n",
              "    .control-group input[type=\"range\"]::-moz-range-thumb {\n",
              "      width: 25px;\n",
              "      height: 25px;\n",
              "      border-radius: 50%;\n",
              "      background: #4CAF50;\n",
              "      cursor: pointer;\n",
              "    }\n",
              "\n",
              "    .radio-group {\n",
              "      display: flex;\n",
              "      justify-content: center;\n",
              "      gap: 10px;\n",
              "    }\n",
              "\n",
              "    .radio-group input[type=\"radio\"] {\n",
              "      display: none;\n",
              "    }\n",
              "\n",
              "    .radio-group label {\n",
              "      background-color: #4CAF50;\n",
              "      color: white;\n",
              "      padding: 10px 20px;\n",
              "      border-radius: 5px;\n",
              "      cursor: pointer;\n",
              "      font-size: 1em;\n",
              "    }\n",
              "\n",
              "    .radio-group input[type=\"radio\"]:checked + label {\n",
              "      background-color: #45a049;\n",
              "    }\n",
              "\n",
              "    #startStopButton {\n",
              "      background-color: #4CAF50;\n",
              "      color: white;\n",
              "      border: none;\n",
              "      padding: 15px 20px;\n",
              "      font-size: 1.2em;\n",
              "      cursor: pointer;\n",
              "      border-radius: 5px;\n",
              "      width: 100%;\n",
              "    }\n",
              "\n",
              "    #startStopButton:hover {\n",
              "      background-color: #45a049;\n",
              "    }\n",
              "\n",
              "    /* Responsive styles */\n",
              "    @media (max-width: 768px) {\n",
              "      .container {\n",
              "        width: 95%;\n",
              "        padding: 15px;\n",
              "      }\n",
              "\n",
              "      .control-group label,\n",
              "      .radio-group label {\n",
              "        font-size: 1.1em;\n",
              "      }\n",
              "    }\n",
              "\n",
              "    @media (max-width: 480px) {\n",
              "      .control-group label,\n",
              "      .radio-group label {\n",
              "        font-size: 1em;\n",
              "      }\n",
              "\n",
              "      #startStopButton {\n",
              "        padding: 10px;\n",
              "        font-size: 1em;\n",
              "      }\n",
              "    }\n",
              "  </style>\n",
              "  <div class=\"container\">\n",
              "    <div class=\"control-group\">\n",
              "      <label for=\"timeSignatureTop\">Time Signature (Top): </label>\n",
              "      <input type=\"number\" id=\"timeSignatureTop\" min=\"1\" value=\"4\">\n",
              "    </div>\n",
              "    <div class=\"control-group\">\n",
              "      <label for=\"timeSignatureBottom\">Time Signature (Bottom): </label>\n",
              "      <input type=\"number\" id=\"timeSignatureBottom\" min=\"1\" value=\"4\">\n",
              "    </div>\n",
              "    <div class=\"control-group\">\n",
              "      <label for=\"tempo\">Tempo (BPM): </label>\n",
              "      <input type=\"number\" id=\"tempo\" min=\"30\" max=\"300\" value=\"120\">\n",
              "    </div>\n",
              "    <div class=\"control-group\">\n",
              "      <label for=\"gain\">Gain: </label>\n",
              "      <input type=\"range\" id=\"gain\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\">\n",
              "    </div>\n",
              "    <div class=\"control-group radio-group\">\n",
              "      <input type=\"radio\" id=\"tone\" name=\"soundType\" value=\"tone\" checked>\n",
              "      <label for=\"tone\">Tone</label>\n",
              "      <input type=\"radio\" id=\"click\" name=\"soundType\" value=\"click\">\n",
              "      <label for=\"click\">Click</label>\n",
              "    </div>\n",
              "    <button id=\"startStopButton\">Start</button>\n",
              "  </div>\n",
              "`;\n",
              "\n",
              "// Append the HTML structure to the output cell\n",
              "const output = document.createElement('div');\n",
              "output.innerHTML = metronomeHtml;\n",
              "document.body.appendChild(output);\n",
              "\n",
              "// Metronome functionality\n",
              "let audioContext = null;\n",
              "let gainNode = null;\n",
              "let intervalId = null;\n",
              "\n",
              "document.getElementById('startStopButton').addEventListener('click', () => {\n",
              "  if (audioContext === null) {\n",
              "    // Initialize audio context and gain node\n",
              "    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n",
              "    gainNode = audioContext.createGain();\n",
              "    gainNode.connect(audioContext.destination);\n",
              "    \n",
              "    const timeSignatureTop = document.getElementById('timeSignatureTop').value;\n",
              "    const timeSignatureBottom = document.getElementById('timeSignatureBottom').value;\n",
              "    const tempo = document.getElementById('tempo').value;\n",
              "    const gain = document.getElementById('gain').value;\n",
              "    \n",
              "    gainNode.gain.value = gain;\n",
              "    startMetronome(timeSignatureTop, timeSignatureBottom, tempo);\n",
              "    document.getElementById('startStopButton').textContent = 'Stop';\n",
              "  } else {\n",
              "    stopMetronome();\n",
              "    document.getElementById('startStopButton').textContent = 'Start';\n",
              "  }\n",
              "});\n",
              "\n",
              "document.getElementById('gain').addEventListener('input', (event) => {\n",
              "  if (gainNode !== null) {\n",
              "    gainNode.gain.value = event.target.value;\n",
              "  }\n",
              "});\n",
              "\n",
              "function startMetronome(timeSignatureTop, timeSignatureBottom, tempo) {\n",
              "  const interval = (60 / (tempo * timeSignatureBottom / 4)) * 1000; // Convert tempo to milliseconds\n",
              "\n",
              "  let count = 0;\n",
              "  intervalId = setInterval(() => {\n",
              "    click(timeSignatureTop, count);\n",
              "    count = (count + 1) % timeSignatureTop;\n",
              "  }, interval);\n",
              "}\n",
              "\n",
              "function stopMetronome() {\n",
              "  if (intervalId !== null) {\n",
              "    clearInterval(intervalId);\n",
              "    intervalId = null;\n",
              "  }\n",
              "  if (audioContext !== null) {\n",
              "    audioContext.close();\n",
              "    audioContext = null;\n",
              "  }\n",
              "}\n",
              "\n",
              "function click(timeSignatureTop, count) {\n",
              "  const oscillator = audioContext.createOscillator();\n",
              "  oscillator.connect(gainNode);\n",
              "  \n",
              "  const soundType = document.querySelector('input[name=\"soundType\"]:checked').value;\n",
              "\n",
              "  // Different sounds for the first beat of the measure and the rest\n",
              "  if (soundType === 'tone') {\n",
              "    if (count === 0) {\n",
              "      oscillator.frequency.setValueAtTime(1000, audioContext.currentTime);\n",
              "    } else {\n",
              "      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n",
              "    }\n",
              "    oscillator.start();\n",
              "    oscillator.stop(audioContext.currentTime + 0.1);\n",
              "  } else if (soundType === 'click') {\n",
              "    const buffer = audioContext.createBuffer(1, audioContext.sampleRate * 0.1, audioContext.sampleRate);\n",
              "    const data = buffer.getChannelData(0);\n",
              "    for (let i = 0; i < data.length; i++) {\n",
              "      data[i] = (Math.random() * 2 - 1) * (1 - i / data.length);\n",
              "    }\n",
              "    const click = audioContext.createBufferSource();\n",
              "    click.buffer = buffer;\n",
              "    click.connect(gainNode);\n",
              "    click.start();\n",
              "  }\n",
              "}\n",
              "\n",
              "// To ensure the script runs only in Google Colab\n",
              "if (typeof google !== 'undefined' && typeof google.colab !== 'undefined') {\n",
              "  google.colab.output.clear();\n",
              "  google.colab.output.append(output);\n",
              "}\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "%%javascript\n",
        "\n",
        "// Create an HTML structure for the metronome with modern, responsive design\n",
        "const metronomeHtml = `\n",
        "  <style>\n",
        "    /* General styles */\n",
        "    body {\n",
        "      font-family: 'Arial', sans-serif;\n",
        "      display: flex;\n",
        "      justify-content: center;\n",
        "      align-items: center;\n",
        "      height: 100vh;\n",
        "      background-color: #f0f0f0;\n",
        "      margin: 0;\n",
        "    }\n",
        "\n",
        "    .container {\n",
        "      background: white;\n",
        "      border-radius: 8px;\n",
        "      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n",
        "      padding: 20px;\n",
        "      width: 90%;\n",
        "      max-width: 500px;\n",
        "      text-align: center;\n",
        "    }\n",
        "\n",
        "    .control-group {\n",
        "      margin-bottom: 15px;\n",
        "    }\n",
        "\n",
        "    .control-group label {\n",
        "      display: block;\n",
        "      font-size: 1.2em;\n",
        "      margin-bottom: 5px;\n",
        "    }\n",
        "\n",
        "    .control-group input[type=\"number\"],\n",
        "    .control-group input[type=\"range\"] {\n",
        "      width: 100%;\n",
        "      padding: 10px;\n",
        "      font-size: 1em;\n",
        "      box-sizing: border-box;\n",
        "      border: 1px solid #ddd;\n",
        "      border-radius: 4px;\n",
        "    }\n",
        "\n",
        "    .control-group input[type=\"range\"] {\n",
        "      -webkit-appearance: none;\n",
        "      appearance: none;\n",
        "      height: 10px;\n",
        "      background: #ddd;\n",
        "      outline: none;\n",
        "      opacity: 0.7;\n",
        "      transition: opacity 0.2s;\n",
        "    }\n",
        "\n",
        "    .control-group input[type=\"range\"]:hover {\n",
        "      opacity: 1;\n",
        "    }\n",
        "\n",
        "    .control-group input[type=\"range\"]::-webkit-slider-thumb {\n",
        "      -webkit-appearance: none;\n",
        "      appearance: none;\n",
        "      width: 25px;\n",
        "      height: 25px;\n",
        "      border-radius: 50%;\n",
        "      background: #4CAF50;\n",
        "      cursor: pointer;\n",
        "    }\n",
        "\n",
        "    .control-group input[type=\"range\"]::-moz-range-thumb {\n",
        "      width: 25px;\n",
        "      height: 25px;\n",
        "      border-radius: 50%;\n",
        "      background: #4CAF50;\n",
        "      cursor: pointer;\n",
        "    }\n",
        "\n",
        "    .radio-group {\n",
        "      display: flex;\n",
        "      justify-content: center;\n",
        "      gap: 10px;\n",
        "    }\n",
        "\n",
        "    .radio-group input[type=\"radio\"] {\n",
        "      display: none;\n",
        "    }\n",
        "\n",
        "    .radio-group label {\n",
        "      background-color: #4CAF50;\n",
        "      color: white;\n",
        "      padding: 10px 20px;\n",
        "      border-radius: 5px;\n",
        "      cursor: pointer;\n",
        "      font-size: 1em;\n",
        "    }\n",
        "\n",
        "    .radio-group input[type=\"radio\"]:checked + label {\n",
        "      background-color: #45a049;\n",
        "    }\n",
        "\n",
        "    #startStopButton {\n",
        "      background-color: #4CAF50;\n",
        "      color: white;\n",
        "      border: none;\n",
        "      padding: 15px 20px;\n",
        "      font-size: 1.2em;\n",
        "      cursor: pointer;\n",
        "      border-radius: 5px;\n",
        "      width: 100%;\n",
        "    }\n",
        "\n",
        "    #startStopButton:hover {\n",
        "      background-color: #45a049;\n",
        "    }\n",
        "\n",
        "    /* Responsive styles */\n",
        "    @media (max-width: 768px) {\n",
        "      .container {\n",
        "        width: 95%;\n",
        "        padding: 15px;\n",
        "      }\n",
        "\n",
        "      .control-group label,\n",
        "      .radio-group label {\n",
        "        font-size: 1.1em;\n",
        "      }\n",
        "    }\n",
        "\n",
        "    @media (max-width: 480px) {\n",
        "      .control-group label,\n",
        "      .radio-group label {\n",
        "        font-size: 1em;\n",
        "      }\n",
        "\n",
        "      #startStopButton {\n",
        "        padding: 10px;\n",
        "        font-size: 1em;\n",
        "      }\n",
        "    }\n",
        "  </style>\n",
        "  <div class=\"container\">\n",
        "    <div class=\"control-group\">\n",
        "      <label for=\"timeSignatureTop\">Time Signature (Top): </label>\n",
        "      <input type=\"number\" id=\"timeSignatureTop\" min=\"1\" value=\"4\">\n",
        "    </div>\n",
        "    <div class=\"control-group\">\n",
        "      <label for=\"timeSignatureBottom\">Time Signature (Bottom): </label>\n",
        "      <input type=\"number\" id=\"timeSignatureBottom\" min=\"1\" value=\"4\">\n",
        "    </div>\n",
        "    <div class=\"control-group\">\n",
        "      <label for=\"tempo\">Tempo (BPM): </label>\n",
        "      <input type=\"number\" id=\"tempo\" min=\"30\" max=\"300\" value=\"120\">\n",
        "    </div>\n",
        "    <div class=\"control-group\">\n",
        "      <label for=\"gain\">Gain: </label>\n",
        "      <input type=\"range\" id=\"gain\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\">\n",
        "    </div>\n",
        "    <div class=\"control-group radio-group\">\n",
        "      <input type=\"radio\" id=\"tone\" name=\"soundType\" value=\"tone\" checked>\n",
        "      <label for=\"tone\">Tone</label>\n",
        "      <input type=\"radio\" id=\"click\" name=\"soundType\" value=\"click\">\n",
        "      <label for=\"click\">Click</label>\n",
        "    </div>\n",
        "    <button id=\"startStopButton\">Start</button>\n",
        "  </div>\n",
        "`;\n",
        "\n",
        "// Append the HTML structure to the output cell\n",
        "const output = document.createElement('div');\n",
        "output.innerHTML = metronomeHtml;\n",
        "document.body.appendChild(output);\n",
        "\n",
        "// Metronome functionality\n",
        "let audioContext = null;\n",
        "let gainNode = null;\n",
        "let intervalId = null;\n",
        "\n",
        "document.getElementById('startStopButton').addEventListener('click', () => {\n",
        "  if (audioContext === null) {\n",
        "    // Initialize audio context and gain node\n",
        "    audioContext = new (window.AudioContext || window.webkitAudioContext)();\n",
        "    gainNode = audioContext.createGain();\n",
        "    gainNode.connect(audioContext.destination);\n",
        "\n",
        "    const timeSignatureTop = document.getElementById('timeSignatureTop').value;\n",
        "    const timeSignatureBottom = document.getElementById('timeSignatureBottom').value;\n",
        "    const tempo = document.getElementById('tempo').value;\n",
        "    const gain = document.getElementById('gain').value;\n",
        "\n",
        "    gainNode.gain.value = gain;\n",
        "    startMetronome(timeSignatureTop, timeSignatureBottom, tempo);\n",
        "    document.getElementById('startStopButton').textContent = 'Stop';\n",
        "  } else {\n",
        "    stopMetronome();\n",
        "    document.getElementById('startStopButton').textContent = 'Start';\n",
        "  }\n",
        "});\n",
        "\n",
        "document.getElementById('gain').addEventListener('input', (event) => {\n",
        "  if (gainNode !== null) {\n",
        "    gainNode.gain.value = event.target.value;\n",
        "  }\n",
        "});\n",
        "\n",
        "function startMetronome(timeSignatureTop, timeSignatureBottom, tempo) {\n",
        "  const interval = (60 / (tempo * timeSignatureBottom / 4)) * 1000; // Convert tempo to milliseconds\n",
        "\n",
        "  let count = 0;\n",
        "  intervalId = setInterval(() => {\n",
        "    click(timeSignatureTop, count);\n",
        "    count = (count + 1) % timeSignatureTop;\n",
        "  }, interval);\n",
        "}\n",
        "\n",
        "function stopMetronome() {\n",
        "  if (intervalId !== null) {\n",
        "    clearInterval(intervalId);\n",
        "    intervalId = null;\n",
        "  }\n",
        "  if (audioContext !== null) {\n",
        "    audioContext.close();\n",
        "    audioContext = null;\n",
        "  }\n",
        "}\n",
        "\n",
        "function click(timeSignatureTop, count) {\n",
        "  const oscillator = audioContext.createOscillator();\n",
        "  oscillator.connect(gainNode);\n",
        "\n",
        "  const soundType = document.querySelector('input[name=\"soundType\"]:checked').value;\n",
        "\n",
        "  // Different sounds for the first beat of the measure and the rest\n",
        "  if (soundType === 'tone') {\n",
        "    if (count === 0) {\n",
        "      oscillator.frequency.setValueAtTime(1000, audioContext.currentTime);\n",
        "    } else {\n",
        "      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n",
        "    }\n",
        "    oscillator.start();\n",
        "    oscillator.stop(audioContext.currentTime + 0.1);\n",
        "  } else if (soundType === 'click') {\n",
        "    const buffer = audioContext.createBuffer(1, audioContext.sampleRate * 0.1, audioContext.sampleRate);\n",
        "    const data = buffer.getChannelData(0);\n",
        "    for (let i = 0; i < data.length; i++) {\n",
        "      data[i] = (Math.random() * 2 - 1) * (1 - i / data.length);\n",
        "    }\n",
        "    const click = audioContext.createBufferSource();\n",
        "    click.buffer = buffer;\n",
        "    click.connect(gainNode);\n",
        "    click.start();\n",
        "  }\n",
        "}\n",
        "\n",
        "// To ensure the script runs only in Google Colab\n",
        "if (typeof google !== 'undefined' && typeof google.colab !== 'undefined') {\n",
        "  google.colab.output.clear();\n",
        "  google.colab.output.append(output);\n",
        "}\n"
      ]
    }
  ]
}